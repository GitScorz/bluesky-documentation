"use strict";(self.webpackChunkbluesky_documentation=self.webpackChunkbluesky_documentation||[]).push([[639],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),k=r,m=u["".concat(s,".").concat(k)]||u[k]||d[k]||l;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6604:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const l={id:"player",title:"Player Component",sidebar_label:"Player"},i=void 0,o={unversionedId:"documentation/core/player",id:"documentation/core/player",title:"Player Component",description:"Component Available",source:"@site/docs/documentation/core/player.md",sourceDirName:"documentation/core",slug:"/documentation/core/player",permalink:"/bluesky-documentation/docs/documentation/core/player",draft:!1,editUrl:"https://github.com/GitScorz/bluesky/edit/documentation/docs/documentation/core/player.md",tags:[],version:"current",frontMatter:{id:"player",title:"Player Component",sidebar_label:"Player"},sidebar:"mySidebar",previous:{title:"Core",permalink:"/bluesky-documentation/docs/documentation/core/"},next:{title:"Fetch",permalink:"/bluesky-documentation/docs/documentation/core/fetch"}},s={},c=[{value:"Required Attributes",id:"required-attributes",level:2},{value:"<strong>Server</strong>",id:"server",level:3},{value:"<strong>Client</strong>",id:"client",level:3},{value:"Methods",id:"methods",level:2},{value:"<strong>Server</strong>",id:"server-1",level:3},{value:"<code>GetData</code>",id:"getdata",level:4},{value:"<strong>Client</strong>",id:"client-1",level:3},{value:"<code>GetData</code>",id:"getdata-1",level:4},{value:"<code>SetData</code>",id:"setdata",level:4},{value:"Events",id:"events",level:2},{value:"<strong>Server</strong>",id:"server-2",level:3},{value:"<strong>Client</strong>",id:"client-2",level:3},{value:"<code>Player:Client:SetData</code>",id:"playerclientsetdata",level:4},{value:"Entity",id:"entity",level:2},{value:"Methods",id:"methods-1",level:3},{value:"<code>GetData</code>",id:"getdata-2",level:4},{value:"<code>SetData</code>",id:"setdata-1",level:4},{value:"<code>IsAdmin</code>",id:"isadmin",level:4},{value:"<code>GetLevel</code>",id:"getlevel",level:4}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{style:{width:"fit-content",margin:"auto",textAlign:"center"}},(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"2"},"Component Available")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Server"),(0,r.kt)("td",null,"Yes")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Client"),(0,r.kt)("td",null,"Yes")))),(0,r.kt)("p",null,"This is the component that handles storing & retrieving all player-related data."),(0,r.kt)("h2",{id:"required-attributes"},"Required Attributes"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"server"},(0,r.kt)("strong",{parentName:"h3"},"Server")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GetData: function"))),(0,r.kt)("h3",{id:"client"},(0,r.kt)("strong",{parentName:"h3"},"Client")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SetData: function")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GetData: function"))),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"server-1"},(0,r.kt)("strong",{parentName:"h3"},"Server")),(0,r.kt)("h4",{id:"getdata"},(0,r.kt)("inlineCode",{parentName:"h4"},"GetData")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},(0,r.kt)("inlineCode",{parentName:"li"},"discord: string"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Return"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},(0,r.kt)("inlineCode",{parentName:"li"},"value: table"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},"Retrieves the user data from the database by their Discord ID, if no user with their ID exists it will create one."))),(0,r.kt)("h3",{id:"client-1"},(0,r.kt)("strong",{parentName:"h3"},"Client")),(0,r.kt)("h4",{id:"getdata-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"GetData")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},(0,r.kt)("inlineCode",{parentName:"li"},"key: string"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Return"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},(0,r.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},"Retrieves data that was bound to the player object with the given key."))),(0,r.kt)("h4",{id:"setdata"},(0,r.kt)("inlineCode",{parentName:"h4"},"SetData")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},(0,r.kt)("inlineCode",{parentName:"li"},"key: string, value: any"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Return"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},(0,r.kt)("inlineCode",{parentName:"li"},"None"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},"Sets data bound to the player object with the given key."))),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"server-2"},(0,r.kt)("strong",{parentName:"h3"},"Server")),(0,r.kt)("p",null,"No server events are fired from this component."),(0,r.kt)("h3",{id:"client-2"},(0,r.kt)("strong",{parentName:"h3"},"Client")),(0,r.kt)("h4",{id:"playerclientsetdata"},(0,r.kt)("inlineCode",{parentName:"h4"},"Player:Client:SetData")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Sent Values"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},(0,r.kt)("inlineCode",{parentName:"li"},"playerData: table"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},"Updates the targetted clients local player object data."))),(0,r.kt)("h2",{id:"entity"},"Entity"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"When a player joins the server fully an event ",(0,r.kt)("inlineCode",{parentName:"p"},"Queue:Server:SessionActive")," is fired which the processing of loading that players data. That data is stored in an object that is stored in a table in base which has its own methods to store & retrieving data specific to that player. To get this data you must go through the ",(0,r.kt)("a",{parentName:"p",href:"/bluesky-documentation/docs/documentation/core/fetch"},"Fetch Component"),"."),(0,r.kt)("h3",{id:"methods-1"},"Methods"),(0,r.kt)("h4",{id:"getdata-2"},(0,r.kt)("inlineCode",{parentName:"h4"},"GetData")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},(0,r.kt)("inlineCode",{parentName:"li"},"key: string"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Return"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},(0,r.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},"Retrieves data that was bound to the player object with the given key."))),(0,r.kt)("h4",{id:"setdata-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"SetData")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},(0,r.kt)("inlineCode",{parentName:"li"},"key: string, value: any"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Return"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},(0,r.kt)("inlineCode",{parentName:"li"},"None"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},"Sets data bound to the player object with the given key."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Permissions (",(0,r.kt)("em",{parentName:"strong"},"Prefix"),": Permissions)")),(0,r.kt)("h4",{id:"isadmin"},(0,r.kt)("inlineCode",{parentName:"h4"},"IsAdmin")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},(0,r.kt)("inlineCode",{parentName:"li"},"None"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Return"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},(0,r.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},"Checks whether or not if the player is in a Discord role that was defined as a staff role."))),(0,r.kt)("h4",{id:"getlevel"},(0,r.kt)("inlineCode",{parentName:"h4"},"GetLevel")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},(0,r.kt)("inlineCode",{parentName:"li"},"None"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Return"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},(0,r.kt)("inlineCode",{parentName:"li"},"int"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": ",(0,r.kt)("span",{style:{color:"#cecece"}},"Returns the max permission level the user has based on Discord roles."))))}d.isMDXComponent=!0}}]);